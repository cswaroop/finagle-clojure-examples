/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package dog_shelter.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

// No additional import required for struct/union.

public class DogInfo implements TBase<DogInfo, DogInfo._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DogInfo");

  private static final TField BREED_FIELD_DESC = new TField("breed", TType.STRING, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField HOUSE_TRAINED_FIELD_DESC = new TField("houseTrained", TType.BOOL, (short)3);
  private static final TField BEAUTIFUL_FIELD_DESC = new TField("beautiful", TType.BOOL, (short)4);


  public String breed;
  public String name;
  public boolean houseTrained;
  public boolean beautiful;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    BREED((short)1, "breed"),
    NAME((short)2, "name"),
    HOUSE_TRAINED((short)3, "houseTrained"),
    BEAUTIFUL((short)4, "beautiful");
  
    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
  
    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BREED
  	return BREED;
        case 2: // NAME
  	return NAME;
        case 3: // HOUSE_TRAINED
  	return HOUSE_TRAINED;
        case 4: // BEAUTIFUL
  	return BEAUTIFUL;
        default:
  	return null;
      }
    }
  
    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
  
    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }
  
    private final short _thriftId;
    private final String _fieldName;
  
    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
  
    public short getThriftFieldId() {
      return _thriftId;
    }
  
    public String getFieldName() {
      return _fieldName;
    }
  }


  // isset id assignments
  private static final int __HOUSETRAINED_ISSET_ID = 0;
  private static final int __BEAUTIFUL_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BREED, new FieldMetaData("breed", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.NAME, new FieldMetaData("name", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.STRING)));
    tmpMap.put(_Fields.HOUSE_TRAINED, new FieldMetaData("houseTrained", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.BOOL)));
    tmpMap.put(_Fields.BEAUTIFUL, new FieldMetaData("beautiful", TFieldRequirementType.DEFAULT,
      new FieldValueMetaData(TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(DogInfo.class, metaDataMap);
  }


  public DogInfo() {
  }

  public DogInfo(
    String breed,
    String name,
    boolean houseTrained,
    boolean beautiful)
  {
    this();
    this.breed = breed;
    this.name = name;
    this.houseTrained = houseTrained;
    setHouseTrainedIsSet(true);
    this.beautiful = beautiful;
    setBeautifulIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DogInfo(DogInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetBreed()) {
      this.breed = other.breed;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.houseTrained = other.houseTrained;
    this.beautiful = other.beautiful;
  }

  public DogInfo deepCopy() {
    return new DogInfo(this);
  }

  @Override
  public void clear() {
    this.breed = null;
    this.name = null;
    setHouseTrainedIsSet(false);
    this.houseTrained = false;
    setBeautifulIsSet(false);
    this.beautiful = false;
  }

  public String getBreed() {
    return this.breed;
  }

  public DogInfo setBreed(String breed) {
    this.breed = breed;
    
    return this;
  }

  public void unsetBreed() {
    this.breed = null;
  }

  /** Returns true if field breed is set (has been asigned a value) and false otherwise */
  public boolean isSetBreed() {
    return this.breed != null;
  }

  public void setBreedIsSet(boolean value) {
    if (!value) {
      this.breed = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public DogInfo setName(String name) {
    this.name = name;
    
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been asigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isHouseTrained() {
    return this.houseTrained;
  }

  public DogInfo setHouseTrained(boolean houseTrained) {
    this.houseTrained = houseTrained;
    setHouseTrainedIsSet(true);

    return this;
  }

  public void unsetHouseTrained() {
  __isset_bit_vector.clear(__HOUSETRAINED_ISSET_ID);
  }

  /** Returns true if field houseTrained is set (has been asigned a value) and false otherwise */
  public boolean isSetHouseTrained() {
    return __isset_bit_vector.get(__HOUSETRAINED_ISSET_ID);
  }

  public void setHouseTrainedIsSet(boolean value) {
    __isset_bit_vector.set(__HOUSETRAINED_ISSET_ID, value);
  }

  public boolean isBeautiful() {
    return this.beautiful;
  }

  public DogInfo setBeautiful(boolean beautiful) {
    this.beautiful = beautiful;
    setBeautifulIsSet(true);

    return this;
  }

  public void unsetBeautiful() {
  __isset_bit_vector.clear(__BEAUTIFUL_ISSET_ID);
  }

  /** Returns true if field beautiful is set (has been asigned a value) and false otherwise */
  public boolean isSetBeautiful() {
    return __isset_bit_vector.get(__BEAUTIFUL_ISSET_ID);
  }

  public void setBeautifulIsSet(boolean value) {
    __isset_bit_vector.set(__BEAUTIFUL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BREED:
      if (value == null) {
        unsetBreed();
      } else {
        setBreed((String)value);
      }
      break;
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;
    case HOUSE_TRAINED:
      if (value == null) {
        unsetHouseTrained();
      } else {
        setHouseTrained((Boolean)value);
      }
      break;
    case BEAUTIFUL:
      if (value == null) {
        unsetBeautiful();
      } else {
        setBeautiful((Boolean)value);
      }
      break;
    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BREED:
      return getBreed();
    case NAME:
      return getName();
    case HOUSE_TRAINED:
      return new Boolean(isHouseTrained());
    case BEAUTIFUL:
      return new Boolean(isBeautiful());
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BREED:
      return isSetBreed();
    case NAME:
      return isSetName();
    case HOUSE_TRAINED:
      return isSetHouseTrained();
    case BEAUTIFUL:
      return isSetBeautiful();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DogInfo)
      return this.equals((DogInfo)that);
    return false;
  }

  public boolean equals(DogInfo that) {
    if (that == null)
      return false;
    boolean this_present_breed = true && this.isSetBreed();
    boolean that_present_breed = true && that.isSetBreed();
    if (this_present_breed || that_present_breed) {
      if (!(this_present_breed && that_present_breed))
        return false;
      if (!this.breed.equals(that.breed))
        return false;
    }
    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }
    boolean this_present_houseTrained = true;
    boolean that_present_houseTrained = true;
    if (this_present_houseTrained || that_present_houseTrained) {
      if (!(this_present_houseTrained && that_present_houseTrained))
        return false;
      if (this.houseTrained != that.houseTrained)
        return false;
    }
    boolean this_present_beautiful = true;
    boolean that_present_beautiful = true;
    if (this_present_beautiful || that_present_beautiful) {
      if (!(this_present_beautiful && that_present_beautiful))
        return false;
      if (this.beautiful != that.beautiful)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();
    boolean present_breed = true && (isSetBreed());
    builder.append(present_breed);
    if (present_breed)
      builder.append(breed);
    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);
    boolean present_houseTrained = true;
    builder.append(present_houseTrained);
    if (present_houseTrained)
      builder.append(houseTrained);
    boolean present_beautiful = true;
    builder.append(present_beautiful);
    if (present_beautiful)
      builder.append(beautiful);
    return builder.toHashCode();
  }

  public int compareTo(DogInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    DogInfo typedOther = (DogInfo)other;

    lastComparison = Boolean.valueOf(isSetBreed()).compareTo(typedOther.isSetBreed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBreed()) {
      lastComparison = TBaseHelper.compareTo(this.breed, typedOther.breed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHouseTrained()).compareTo(typedOther.isSetHouseTrained());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHouseTrained()) {
      lastComparison = TBaseHelper.compareTo(this.houseTrained, typedOther.houseTrained);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeautiful()).compareTo(typedOther.isSetBeautiful());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeautiful()) {
      lastComparison = TBaseHelper.compareTo(this.beautiful, typedOther.beautiful);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case 1: // BREED
          if (field.type == TType.STRING) {
            this.breed = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // HOUSE_TRAINED
          if (field.type == TType.BOOL) {
            this.houseTrained = iprot.readBool();
            setHouseTrainedIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BEAUTIFUL
          if (field.type == TType.BOOL) {
            this.beautiful = iprot.readBool();
            setBeautifulIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();
    
    oprot.writeStructBegin(STRUCT_DESC);
    if (this.breed != null) {
      oprot.writeFieldBegin(BREED_FIELD_DESC);
      oprot.writeString(this.breed);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(HOUSE_TRAINED_FIELD_DESC);
    oprot.writeBool(this.houseTrained);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BEAUTIFUL_FIELD_DESC);
    oprot.writeBool(this.beautiful);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DogInfo(");
    boolean first = true;
    sb.append("breed:");
    if (this.breed == null) {
      sb.append("null");
    } else {
      sb.append(this.breed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("houseTrained:");
    sb.append(this.houseTrained);
    first = false;
    if (!first) sb.append(", ");
    sb.append("beautiful:");
    sb.append(this.beautiful);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }
}
